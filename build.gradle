plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
	id 'war'
	//id "com.moowork.node" version "1.3.1"
	id 'com.github.node-gradle.node' version '2.2.0'
	id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

springBoot {
    mainClassName = 'org.dmsv.challengetracker.ChallengeTrackerApplication'
}
war {
	archiveBaseName ='challengtracker'
	enabled=true
}

processResources{
	from('db')

}

group = 'org.dmsv'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation project(':server-app')
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	compile(group: 'org.postgresql', name: 'postgresql', version: '42.0.0')

	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Read more about how to configure the plugin from
// https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
node {
	// Version of node to use.
	version = '12.14.1'

	// Version of npm to use.
	npmVersion = '6.13.4'
	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true

	// Base URL for fetching node distributions (change if you have a mirror).
	distBaseUrl = 'https://nodejs.org/dist'

	// Set the work directory for unpacking node
	workDir = file("${project.buildDir}/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/npm")
}

task appNpmInstall(type: NpmTask) {
	description = "Installs all dependencies from package.json"
	workingDir = file("${project.projectDir}/webapp")
	args = ["install"]
}

task appNpmBuild(type: NpmTask) {
	description = "Builds production version of the webapp"
	workingDir = file("${project.projectDir}/webapp")
	args = ["run", "build"]
}

task copyWebApp(type: Copy) {
	from '/webapp/build'
	into 'build/resources/main/static/.'
}

appNpmBuild.dependsOn appNpmInstall
copyWebApp.dependsOn appNpmBuild
compileJava.dependsOn copyWebApp